/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SupplyChainNetworkContract
  extends Truffle.Contract<SupplyChainNetworkInstance> {
  [x: string]: any;
  "new"(meta?: Truffle.TransactionDetails): Promise<SupplyChainNetworkInstance>;
}

export interface Contracts {
  name: "Contracts";
  args: {
    id: BN;
    from: string;
    to: string;
    productId: BN;
    state: BN;
    timestamp: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface Requests {
  name: "Requests";
  args: {
    requestId: BN;
    from: string;
    to: string;
    productId: BN;
    quantity: BN;
    state: BN;
    timestamp: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

type AllEvents = Contracts | Requests;

export interface SupplyChainNetworkInstance extends Truffle.ContractInstance {
  companies(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: boolean; 2: string }>;

  companyPrerequisiteSupplies(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean }>;

  companySupplies(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean }>;

  headCompanies(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: boolean; 2: string }>;

  listOfProducts(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: boolean }>;

  networkOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pastSupplies(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  productOwners(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: boolean }>;

  products(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: boolean }>;

  addCompany: {
    (
      owner: string,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      owner: string,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string,
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteCompany: {
    (companyAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      companyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      companyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      companyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addProductWithoutRecipe: {
    (
      productId: number | BN | string,
      productName: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: number | BN | string,
      productName: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: number | BN | string,
      productName: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: number | BN | string,
      productName: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addProductWithRecipe: {
    (
      productId: number | BN | string,
      productName: string,
      prerequisiteSupplies: {
        productId: number | BN | string;
        productName: string;
        exist: boolean;
      }[],
      quantityPrerequisiteSupplies: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: number | BN | string,
      productName: string,
      prerequisiteSupplies: {
        productId: number | BN | string;
        productName: string;
        exist: boolean;
      }[],
      quantityPrerequisiteSupplies: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: number | BN | string,
      productName: string,
      prerequisiteSupplies: {
        productId: number | BN | string;
        productName: string;
        exist: boolean;
      }[],
      quantityPrerequisiteSupplies: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: number | BN | string,
      productName: string,
      prerequisiteSupplies: {
        productId: number | BN | string;
        productName: string;
        exist: boolean;
      }[],
      quantityPrerequisiteSupplies: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteProduct: {
    (
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCompany(txDetails?: Truffle.TransactionDetails): Promise<{
    owner: string;
    exist: boolean;
    name: string;
    listOfSupply: { productId: BN; productName: string; exist: boolean }[];
    listOfPrerequisites: {
      productId: BN;
      productName: string;
      exist: boolean;
    }[];
    recipes: {
      supply: { productId: BN; productName: string; exist: boolean };
      prerequisites: { productId: BN; productName: string; exist: boolean }[];
      quantities: BN[];
    }[];
    upstream: string[];
    downstream: { companyId: string; productId: BN }[];
    incomingRequests: {
      id: BN;
      from: string;
      to: string;
      productId: BN;
      quantity: BN;
    }[];
    outgoingRequests: {
      id: BN;
      from: string;
      to: string;
      productId: BN;
      quantity: BN;
    }[];
    incomingContract: { id: BN; from: string; to: string; productId: BN }[];
    outgoingContract: { id: BN; from: string; to: string; productId: BN }[];
  }>;

  getPastSupply(
    supplyId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getSupply(
    productId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ total: BN; supplyId: BN[]; quantities: BN[]; exist: boolean }>;

  getPrerequisiteSupply(
    productId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ total: BN; supplyId: BN[]; quantities: BN[]; exist: boolean }>;

  getRecipe(
    productId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    supply: { productId: BN; productName: string; exist: boolean };
    prerequisites: { productId: BN; productName: string; exist: boolean }[];
    quantities: BN[];
  }>;

  convertToSupply: {
    (
      productId: number | BN | string,
      numberOfSupply: number | BN | string,
      supplyId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: number | BN | string,
      numberOfSupply: number | BN | string,
      supplyId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: number | BN | string,
      numberOfSupply: number | BN | string,
      supplyId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: number | BN | string,
      numberOfSupply: number | BN | string,
      supplyId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  convertPrerequisiteToSupply: {
    (
      newSupplyProductId: number | BN | string,
      numberOfNewSupply: number | BN | string,
      newSupplyId: number | BN | string,
      prerequisiteProductIds: (number | BN | string)[],
      prerequisiteSupplyIds: (number | BN | string)[],
      prerequisiteQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newSupplyProductId: number | BN | string,
      numberOfNewSupply: number | BN | string,
      newSupplyId: number | BN | string,
      prerequisiteProductIds: (number | BN | string)[],
      prerequisiteSupplyIds: (number | BN | string)[],
      prerequisiteQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newSupplyProductId: number | BN | string,
      numberOfNewSupply: number | BN | string,
      newSupplyId: number | BN | string,
      prerequisiteProductIds: (number | BN | string)[],
      prerequisiteSupplyIds: (number | BN | string)[],
      prerequisiteQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newSupplyProductId: number | BN | string,
      numberOfNewSupply: number | BN | string,
      newSupplyId: number | BN | string,
      prerequisiteProductIds: (number | BN | string)[],
      prerequisiteSupplyIds: (number | BN | string)[],
      prerequisiteQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendRequest: {
    (
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveRequest: {
    (
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      supplyIdsAndQuantities: (number | BN | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      supplyIdsAndQuantities: (number | BN | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      supplyIdsAndQuantities: (number | BN | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      supplyIdsAndQuantities: (number | BN | string)[][],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  declineRequest: {
    (
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      request: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
        quantity: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendContract: {
    (
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveContract: {
    (
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  declineContract: {
    (
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      companyContract: {
        id: number | BN | string;
        from: string;
        to: string;
        productId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    companies(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: boolean; 2: string }>;

    companyPrerequisiteSupplies(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean }>;

    companySupplies(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean }>;

    headCompanies(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: boolean; 2: string }>;

    listOfProducts(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: boolean }>;

    networkOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pastSupplies(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    productOwners(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: boolean }>;

    products(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: boolean }>;

    addCompany: {
      (
        owner: string,
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        owner: string,
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner: string,
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deleteCompany: {
      (companyAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        companyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        companyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        companyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addProductWithoutRecipe: {
      (
        productId: number | BN | string,
        productName: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: number | BN | string,
        productName: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: number | BN | string,
        productName: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: number | BN | string,
        productName: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addProductWithRecipe: {
      (
        productId: number | BN | string,
        productName: string,
        prerequisiteSupplies: {
          productId: number | BN | string;
          productName: string;
          exist: boolean;
        }[],
        quantityPrerequisiteSupplies: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: number | BN | string,
        productName: string,
        prerequisiteSupplies: {
          productId: number | BN | string;
          productName: string;
          exist: boolean;
        }[],
        quantityPrerequisiteSupplies: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: number | BN | string,
        productName: string,
        prerequisiteSupplies: {
          productId: number | BN | string;
          productName: string;
          exist: boolean;
        }[],
        quantityPrerequisiteSupplies: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: number | BN | string,
        productName: string,
        prerequisiteSupplies: {
          productId: number | BN | string;
          productName: string;
          exist: boolean;
        }[],
        quantityPrerequisiteSupplies: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deleteProduct: {
      (
        productId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCompany(txDetails?: Truffle.TransactionDetails): Promise<{
      owner: string;
      exist: boolean;
      name: string;
      listOfSupply: { productId: BN; productName: string; exist: boolean }[];
      listOfPrerequisites: {
        productId: BN;
        productName: string;
        exist: boolean;
      }[];
      recipes: {
        supply: { productId: BN; productName: string; exist: boolean };
        prerequisites: { productId: BN; productName: string; exist: boolean }[];
        quantities: BN[];
      }[];
      upstream: string[];
      downstream: { companyId: string; productId: BN }[];
      incomingRequests: {
        id: BN;
        from: string;
        to: string;
        productId: BN;
        quantity: BN;
      }[];
      outgoingRequests: {
        id: BN;
        from: string;
        to: string;
        productId: BN;
        quantity: BN;
      }[];
      incomingContract: { id: BN; from: string; to: string; productId: BN }[];
      outgoingContract: { id: BN; from: string; to: string; productId: BN }[];
    }>;

    getPastSupply(
      supplyId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    getSupply(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ total: BN; supplyId: BN[]; quantities: BN[]; exist: boolean }>;

    getPrerequisiteSupply(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ total: BN; supplyId: BN[]; quantities: BN[]; exist: boolean }>;

    getRecipe(
      productId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      supply: { productId: BN; productName: string; exist: boolean };
      prerequisites: { productId: BN; productName: string; exist: boolean }[];
      quantities: BN[];
    }>;

    convertToSupply: {
      (
        productId: number | BN | string,
        numberOfSupply: number | BN | string,
        supplyId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: number | BN | string,
        numberOfSupply: number | BN | string,
        supplyId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: number | BN | string,
        numberOfSupply: number | BN | string,
        supplyId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: number | BN | string,
        numberOfSupply: number | BN | string,
        supplyId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    convertPrerequisiteToSupply: {
      (
        newSupplyProductId: number | BN | string,
        numberOfNewSupply: number | BN | string,
        newSupplyId: number | BN | string,
        prerequisiteProductIds: (number | BN | string)[],
        prerequisiteSupplyIds: (number | BN | string)[],
        prerequisiteQuantities: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newSupplyProductId: number | BN | string,
        numberOfNewSupply: number | BN | string,
        newSupplyId: number | BN | string,
        prerequisiteProductIds: (number | BN | string)[],
        prerequisiteSupplyIds: (number | BN | string)[],
        prerequisiteQuantities: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newSupplyProductId: number | BN | string,
        numberOfNewSupply: number | BN | string,
        newSupplyId: number | BN | string,
        prerequisiteProductIds: (number | BN | string)[],
        prerequisiteSupplyIds: (number | BN | string)[],
        prerequisiteQuantities: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newSupplyProductId: number | BN | string,
        numberOfNewSupply: number | BN | string,
        newSupplyId: number | BN | string,
        prerequisiteProductIds: (number | BN | string)[],
        prerequisiteSupplyIds: (number | BN | string)[],
        prerequisiteQuantities: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendRequest: {
      (
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    approveRequest: {
      (
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        supplyIdsAndQuantities: (number | BN | string)[][],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        supplyIdsAndQuantities: (number | BN | string)[][],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        supplyIdsAndQuantities: (number | BN | string)[][],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        supplyIdsAndQuantities: (number | BN | string)[][],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    declineRequest: {
      (
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        request: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
          quantity: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendContract: {
      (
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    approveContract: {
      (
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    declineContract: {
      (
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        companyContract: {
          id: number | BN | string;
          from: string;
          to: string;
          productId: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
